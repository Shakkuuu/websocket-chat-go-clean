// Code generated by MockGen. DO NOT EDIT.
// Source: room_usecase.go
//
// Generated by this command:
//
//	mockgen -source=room_usecase.go -destination=../mock/usecase/room_mock.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/Shakkuuu/websocket-chat-go-clean/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomUsecase is a mock of RoomUsecase interface.
type MockRoomUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRoomUsecaseMockRecorder
}

// MockRoomUsecaseMockRecorder is the mock recorder for MockRoomUsecase.
type MockRoomUsecaseMockRecorder struct {
	mock *MockRoomUsecase
}

// NewMockRoomUsecase creates a new mock instance.
func NewMockRoomUsecase(ctrl *gomock.Controller) *MockRoomUsecase {
	mock := &MockRoomUsecase{ctrl: ctrl}
	mock.recorder = &MockRoomUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomUsecase) EXPECT() *MockRoomUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoomUsecase) Create(ctx context.Context, user *domain.Room) (*domain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoomUsecaseMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomUsecase)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockRoomUsecase) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomUsecaseMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomUsecase)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockRoomUsecase) GetAll(ctx context.Context) (*domain.Rooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*domain.Rooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRoomUsecaseMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRoomUsecase)(nil).GetAll), ctx)
}

// IDExists mocks base method.
func (m *MockRoomUsecase) IDExists(ctx context.Context, id string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDExists", ctx, id)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IDExists indicates an expected call of IDExists.
func (mr *MockRoomUsecaseMockRecorder) IDExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDExists", reflect.TypeOf((*MockRoomUsecase)(nil).IDExists), ctx, id)
}
