// Code generated by MockGen. DO NOT EDIT.
// Source: participating_room_usecase.go
//
// Generated by this command:
//
//	mockgen -source=participating_room_usecase.go -destination=../mock/usecase/participating_room_mock.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/Shakkuuu/websocket-chat-go-clean/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockParticipatingRoomUsecase is a mock of ParticipatingRoomUsecase interface.
type MockParticipatingRoomUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockParticipatingRoomUsecaseMockRecorder
}

// MockParticipatingRoomUsecaseMockRecorder is the mock recorder for MockParticipatingRoomUsecase.
type MockParticipatingRoomUsecaseMockRecorder struct {
	mock *MockParticipatingRoomUsecase
}

// NewMockParticipatingRoomUsecase creates a new mock instance.
func NewMockParticipatingRoomUsecase(ctrl *gomock.Controller) *MockParticipatingRoomUsecase {
	mock := &MockParticipatingRoomUsecase{ctrl: ctrl}
	mock.recorder = &MockParticipatingRoomUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParticipatingRoomUsecase) EXPECT() *MockParticipatingRoomUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockParticipatingRoomUsecase) Create(ctx context.Context, participatingRoom *domain.ParticipatingRoom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, participatingRoom)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockParticipatingRoomUsecaseMockRecorder) Create(ctx, participatingRoom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).Create), ctx, participatingRoom)
}

// DeleteByRoomID mocks base method.
func (m *MockParticipatingRoomUsecase) DeleteByRoomID(ctx context.Context, roomID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByRoomID", ctx, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByRoomID indicates an expected call of DeleteByRoomID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) DeleteByRoomID(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByRoomID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).DeleteByRoomID), ctx, roomID)
}

// DeleteByUserID mocks base method.
func (m *MockParticipatingRoomUsecase) DeleteByUserID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) DeleteByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).DeleteByUserID), ctx, userID)
}

// DeleteByUserIDAndRoomID mocks base method.
func (m *MockParticipatingRoomUsecase) DeleteByUserIDAndRoomID(ctx context.Context, userID, roomID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIDAndRoomID", ctx, userID, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndRoomID indicates an expected call of DeleteByUserIDAndRoomID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) DeleteByUserIDAndRoomID(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndRoomID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).DeleteByUserIDAndRoomID), ctx, userID, roomID)
}

// GetAll mocks base method.
func (m *MockParticipatingRoomUsecase) GetAll(ctx context.Context) (*domain.ParticipatingRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*domain.ParticipatingRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockParticipatingRoomUsecaseMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).GetAll), ctx)
}

// GetByRoomID mocks base method.
func (m *MockParticipatingRoomUsecase) GetByRoomID(ctx context.Context, roomID string) (*domain.ParticipatingRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRoomID", ctx, roomID)
	ret0, _ := ret[0].(*domain.ParticipatingRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRoomID indicates an expected call of GetByRoomID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) GetByRoomID(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRoomID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).GetByRoomID), ctx, roomID)
}

// GetByUserID mocks base method.
func (m *MockParticipatingRoomUsecase) GetByUserID(ctx context.Context, userID string) (*domain.ParticipatingRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].(*domain.ParticipatingRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).GetByUserID), ctx, userID)
}

// GetByUserIDAndRoomID mocks base method.
func (m *MockParticipatingRoomUsecase) GetByUserIDAndRoomID(ctx context.Context, userID, roomID string) (*domain.ParticipatingRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndRoomID", ctx, userID, roomID)
	ret0, _ := ret[0].(*domain.ParticipatingRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndRoomID indicates an expected call of GetByUserIDAndRoomID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) GetByUserIDAndRoomID(ctx, userID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndRoomID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).GetByUserIDAndRoomID), ctx, userID, roomID)
}

// GetUsersByRoomID mocks base method.
func (m *MockParticipatingRoomUsecase) GetUsersByRoomID(ctx context.Context, roomID string) (*domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRoomID", ctx, roomID)
	ret0, _ := ret[0].(*domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRoomID indicates an expected call of GetUsersByRoomID.
func (mr *MockParticipatingRoomUsecaseMockRecorder) GetUsersByRoomID(ctx, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRoomID", reflect.TypeOf((*MockParticipatingRoomUsecase)(nil).GetUsersByRoomID), ctx, roomID)
}
