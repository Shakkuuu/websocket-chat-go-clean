// Code generated by MockGen. DO NOT EDIT.
// Source: room_repository.o.go
//
// Generated by this command:
//
//	mockgen -source=room_repository.o.go -destination=../mock/repository/room_mock.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/Shakkuuu/websocket-chat-go-clean/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRoomRepo is a mock of RoomRepo interface.
type MockRoomRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRoomRepoMockRecorder
}

// MockRoomRepoMockRecorder is the mock recorder for MockRoomRepo.
type MockRoomRepoMockRecorder struct {
	mock *MockRoomRepo
}

// NewMockRoomRepo creates a new mock instance.
func NewMockRoomRepo(ctrl *gomock.Controller) *MockRoomRepo {
	mock := &MockRoomRepo{ctrl: ctrl}
	mock.recorder = &MockRoomRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomRepo) EXPECT() *MockRoomRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoomRepo) Create(ctx context.Context, room *domain.Room) (*domain.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, room)
	ret0, _ := ret[0].(*domain.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoomRepoMockRecorder) Create(ctx, room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomRepo)(nil).Create), ctx, room)
}

// Delete mocks base method.
func (m *MockRoomRepo) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoomRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoomRepo)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockRoomRepo) GetAll(ctx context.Context) (*domain.Rooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*domain.Rooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRoomRepoMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRoomRepo)(nil).GetAll), ctx)
}

// IDExists mocks base method.
func (m *MockRoomRepo) IDExists(ctx context.Context, id string) (*bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDExists", ctx, id)
	ret0, _ := ret[0].(*bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IDExists indicates an expected call of IDExists.
func (mr *MockRoomRepoMockRecorder) IDExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDExists", reflect.TypeOf((*MockRoomRepo)(nil).IDExists), ctx, id)
}
